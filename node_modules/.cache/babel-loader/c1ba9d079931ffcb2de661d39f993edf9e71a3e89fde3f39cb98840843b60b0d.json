{"ast":null,"code":"var _jsxFileName = \"/Users/273481/Desktop/project/wid/samples/src/apps/emoji-cards/components/EmojiCards.tsx\";\nimport React from 'react';\nimport { DATA } from '../data/emojis';\nimport Card from './Card';\nimport { FormattedMessage } from 'react-intl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BG_COLORS = ['rgba(255, 0, 0, 0.3)', 'rgba(255, 255, 0, 0.3)', 'rgba(255, 0, 255, 0.3)', 'rgba(0, 255, 255, 0.3)', 'rgba(0, 255, 0, 0.3)', 'rgba(0, 0, 255, 0.3)'];\nconst EmojiCards = ({\n  emoji\n}) => {\n  let packedData = DATA === null || DATA === void 0 ? void 0 : DATA.emojis[emoji];\n  if (!packedData) {\n    emoji = 'invalid';\n    packedData = ['ðŸš«', /*#__PURE__*/_jsxDEV(FormattedMessage, {\n      defaultMessage: \"Empty\",\n      id: \"+RhnH+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), 8];\n  }\n  const [unicode, description, categoryIndex] = packedData;\n  const category = DATA.categories[categoryIndex];\n\n  // Pick a background color based on the character codes that make up the emoji\n  let charCodeSum = 0;\n  for (let i = 0; i < unicode.length; i++) {\n    charCodeSum = charCodeSum * 65536 + unicode.charCodeAt(i);\n  }\n  const backgroundColor = BG_COLORS[charCodeSum % BG_COLORS.length];\n\n  // Repeat the display name enough times to use as a background\n  let nameRepeated = '';\n  while (nameRepeated.length < 200) {\n    nameRepeated += emoji;\n  }\n  return /*#__PURE__*/_jsxDEV(Card, {\n    backgroundColor: backgroundColor,\n    unicode: unicode,\n    nameRepeated: nameRepeated,\n    emoji: emoji,\n    description: description,\n    category: category\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_c = EmojiCards;\nexport default EmojiCards;\nvar _c;\n$RefreshReg$(_c, \"EmojiCards\");","map":{"version":3,"names":["React","DATA","Card","FormattedMessage","jsxDEV","_jsxDEV","BG_COLORS","EmojiCards","emoji","packedData","emojis","defaultMessage","id","fileName","_jsxFileName","lineNumber","columnNumber","unicode","description","categoryIndex","category","categories","charCodeSum","i","length","charCodeAt","backgroundColor","nameRepeated","_c","$RefreshReg$"],"sources":["/Users/273481/Desktop/project/wid/samples/src/apps/emoji-cards/components/EmojiCards.tsx"],"sourcesContent":["import React, { ReactElement } from 'react';\n\nimport { DATA } from '../data/emojis';\nimport Card from './Card';\nimport { FormattedMessage } from 'react-intl';\n\nexport interface EmojiCardsProps {\n  /**\n   * The name of the emoji.\n   *\n   * @default tada\n   */\n  emoji: string;\n}\n\nconst BG_COLORS = [\n  'rgba(255, 0, 0, 0.3)',\n  'rgba(255, 255, 0, 0.3)',\n  'rgba(255, 0, 255, 0.3)',\n  'rgba(0, 255, 255, 0.3)',\n  'rgba(0, 255, 0, 0.3)',\n  'rgba(0, 0, 255, 0.3)',\n];\n\nconst EmojiCards = ({ emoji }: EmojiCardsProps): ReactElement => {\n  let packedData = DATA?.emojis[emoji];\n  if (!packedData) {\n    emoji = 'invalid';\n    packedData = [\n      'ðŸš«',\n      <FormattedMessage defaultMessage=\"Empty\" id=\"+RhnH+\" />,\n      8,\n    ];\n  }\n  const [unicode, description, categoryIndex] = packedData;\n\n  const category = DATA.categories[categoryIndex];\n\n  // Pick a background color based on the character codes that make up the emoji\n  let charCodeSum = 0;\n  for (let i = 0; i < unicode.length; i++) {\n    charCodeSum = charCodeSum * 65536 + unicode.charCodeAt(i);\n  }\n  const backgroundColor = BG_COLORS[charCodeSum % BG_COLORS.length];\n\n  // Repeat the display name enough times to use as a background\n  let nameRepeated = '';\n  while (nameRepeated.length < 200) {\n    nameRepeated += emoji;\n  }\n  return (\n    <Card\n      backgroundColor={backgroundColor}\n      unicode={unicode}\n      nameRepeated={nameRepeated}\n      emoji={emoji}\n      description={description}\n      category={category}\n    />\n  );\n};\n\nexport default EmojiCards;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAwB,OAAO;AAE3C,SAASC,IAAI,QAAQ,gBAAgB;AACrC,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,gBAAgB,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAW9C,MAAMC,SAAS,GAAG,CAChB,sBAAsB,EACtB,wBAAwB,EACxB,wBAAwB,EACxB,wBAAwB,EACxB,sBAAsB,EACtB,sBAAsB,CACvB;AAED,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAuB,CAAC,KAAmB;EAC/D,IAAIC,UAAU,GAAGR,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAES,MAAM,CAACF,KAAK,CAAC;EACpC,IAAI,CAACC,UAAU,EAAE;IACfD,KAAK,GAAG,SAAS;IACjBC,UAAU,GAAG,CACX,IAAI,eACJJ,OAAA,CAACF,gBAAgB;MAACQ,cAAc,EAAC,OAAO;MAACC,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACvD,CAAC,CACF;EACH;EACA,MAAM,CAACC,OAAO,EAAEC,WAAW,EAAEC,aAAa,CAAC,GAAGV,UAAU;EAExD,MAAMW,QAAQ,GAAGnB,IAAI,CAACoB,UAAU,CAACF,aAAa,CAAC;;EAE/C;EACA,IAAIG,WAAW,GAAG,CAAC;EACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,OAAO,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;IACvCD,WAAW,GAAGA,WAAW,GAAG,KAAK,GAAGL,OAAO,CAACQ,UAAU,CAACF,CAAC,CAAC;EAC3D;EACA,MAAMG,eAAe,GAAGpB,SAAS,CAACgB,WAAW,GAAGhB,SAAS,CAACkB,MAAM,CAAC;;EAEjE;EACA,IAAIG,YAAY,GAAG,EAAE;EACrB,OAAOA,YAAY,CAACH,MAAM,GAAG,GAAG,EAAE;IAChCG,YAAY,IAAInB,KAAK;EACvB;EACA,oBACEH,OAAA,CAACH,IAAI;IACHwB,eAAe,EAAEA,eAAgB;IACjCT,OAAO,EAAEA,OAAQ;IACjBU,YAAY,EAAEA,YAAa;IAC3BnB,KAAK,EAAEA,KAAM;IACbU,WAAW,EAAEA,WAAY;IACzBE,QAAQ,EAAEA;EAAS;IAAAP,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEN,CAAC;AAACY,EAAA,GApCIrB,UAAU;AAsChB,eAAeA,UAAU;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}